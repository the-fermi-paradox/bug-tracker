CREATE TABLE IF NOT EXISTS users
(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_name VARCHAR(60) NOT NULL,
  user_role VARCHAR(60) NOT NULL,
  date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  inactive BOOL NOT NULL DEFAULT FALSE
);
#
CREATE TABLE IF NOT EXISTS products
(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(60) NOT NULL,
  maintainer_id INT UNSIGNED NOT NULL,
  date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  inactive BOOL NOT NULL DEFAULT FALSE,

  FOREIGN KEY (maintainer_id) REFERENCES users(id)
);
#
CREATE TABLE IF NOT EXISTS tickets
(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(60) NOT NULL,
  description VARCHAR(2000) NOT NULL,
  flavor VARCHAR(60) NOT NULL,
  priority TINYINT UNSIGNED NOT NULL,
  severity TINYINT UNSIGNED NOT NULL,
  reporter_id INT UNSIGNED NOT NULL,
  product_id INT UNSIGNED NOT NULL,
  due_date DATETIME,
  date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  state VARCHAR(10) NOT NULL DEFAULT 'OPEN',
  inactive BOOL NOT NULL DEFAULT FALSE,

  FOREIGN KEY (reporter_id) REFERENCES users(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);
#
CREATE TABLE IF NOT EXISTS comments
(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  description VARCHAR(2000) NOT NULL,
  ticket_id INT UNSIGNED NOT NULL,
  user_id INT UNSIGNED NOT NULL,
  date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  inactive BOOL NOT NULL DEFAULT FALSE,

  FOREIGN KEY (ticket_id) REFERENCES tickets(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);
#
CREATE TABLE IF NOT EXISTS assignments
(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  ticket_id INT UNSIGNED NOT NULL,
  user_id INT UNSIGNED NOT NULL,
  date_assigned TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  FOREIGN KEY (ticket_id) REFERENCES tickets(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);
